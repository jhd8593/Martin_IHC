//choose directory, make sure to use / instead of \ 
dir="C:/Users/mrodrig/Desktop/Ku80_IUTx_Thymus_Script";
DABResults="C:/Users/mrodrig/Desktop/Ku80_IUTx_Thymus_Script/DAB Tiffs";
BlueResults="C:/Users/mrodrig/Desktop/Ku80_IUTx_Thymus_Script/Blue Tiffs";

print("searching "+dir);

//get all files in directory
//make sure all files in this directory are images
imageList = getFileList(dir);
imageName = " "; 
print("Files: ");
for (i = 0; i < imageList.length; i++) {
	print(imageList[i]);
}

//loop through every file name
for(i=0;i<imageList.length;i++){
	print("Processing: "+imageList[i]);
	//see if the file is an image
	if(isImage(imageList[i])){
	//if it is an image, open it
		open(dir+"/"+imageList[i]);
		imageName = imageList[i];
	//Processes it
		Dup();
		close("*");
	}
}


//close results after processing
close("Results");

function Dup() { 
// Duplicates image into 2
id1=getImageID();
run("Duplicate..."," ");
id2=getImageID();

//function inputs
selectImage(id1);
crop();
DABfun();

selectImage(id2);
crop();
Bluefun();
}

function crop () {
	//Crop Image
	makeRectangle(9, 9, 1590, 1146);
	run("Crop");
	
	//Run Brightness
	run("Brightness/Contrast...");
	setMinAndMax(0, 167);
	close("B&C");
}

function DABfun(){	
	
	run("Colour Deconvolution", "vectors=[H DAB]");
	
	  list = getList("image.titles");
	  if (list.length==0)
	     print("No image windows are open");
	  else {
	     print("Image windows:");
	     for (i=0; i<list.length; i++){
	     	imageName=list[i];
	        print("Processing: "+imageName);
	        if(matches(imageName, ".*Colour_3.*")){
	        	print("Matches colour3 "+imageName);
	        	selectImage(imageName);
	        	close();
	        }else if(matches(imageName, ".*Colour_2.*")){
	        	print("Matches colour2 "+imageName);
	        	selectWindow(imageName);
	        	DAB();
	        }else if(matches(imageName, ".*Colour_1.*")){
	        	selectImage(imageName);
	        	close();
	        }
	     }
	  }
	 print("");

}

function DAB(){
				run("Clear Results");
				//DAB Threshold
				run("Auto Threshold", "method=Shanbhag white");
				run("Convert to Mask");
				run("Despeckle");
				run("Watershed");
				//Count DAB Postive Cells
				run("Analyze Particles...", "size=20-300 circularity=0.3-1.00 show=Outlines display summarize");
				//Save Image 
				saveAs("png", DABResults +"/"+imageName + "DAB Results.png");
				selectWindow("Summary");
				saveAs("Results",dir+"/"+imageName +" DABSummary.csv");
				close("Summary");
				
				}

function Bluefun(){       	
				run("Clear Results");
				//Nucleus Threshold
				min=newArray(3);
				max=newArray(3);
				filter=newArray(3);
				a=getTitle();
				run("HSB Stack");
				run("Convert Stack to Images");
				selectWindow("Hue");
				rename("0");
				selectWindow("Saturation");
				rename("1");
				selectWindow("Brightness");
				rename("2");
				min[0]=132;
				max[0]=205;
				filter[0]="pass";
				min[1]=0;
				max[1]=255;
				filter[1]="pass";
				min[2]=0;
				max[2]=243;
				filter[2]="pass";
				for (i=0;i<3;i++){
				  selectWindow(""+i);
				  setThreshold(min[i], max[i]);
				  run("Convert to Mask");
				  if (filter[i]=="stop")  run("Invert");
				}
				imageCalculator("AND create", "0","1");
				imageCalculator("AND create", "Result of 0","2");
				for (i=0;i<3;i++){
				  selectWindow(""+i);
				  close();
				}
				selectWindow("Result of 0");
				close();
				selectWindow("Result of Result of 0");
				rename(a);
				// Colour Thresholding-------------
				
				run("Despeckle");
				run("Watershed");
				
				//Count Nuclei
				run("Analyze Particles...", "size=50-300 circularity=0.30-1.00 show=Outlines display summarize");
				saveAs("png", BlueResults +"/"+imageName + "Blue Results.png");
				selectWindow("Summary");
				saveAs("Results",dir+"/"+imageName +" BlueSummary.csv");
				run("Clear Results");
				
				
}

function isImage(string){
	if(matches(string, ".*.(jpg|tif|png|tiff)$")){
		return true;
	}else{
		return false;
	}
}

